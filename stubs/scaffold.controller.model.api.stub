<?php

namespace {{ namespace }};

use {{ namespacedModel }};
use {{ rootNamespace }}Http\Controllers\Controller;
use {{ rootNamespace }}Http\Resources\{{ modelResourceCollection }};
use {{ rootNamespace }}Http\Resources\{{ modelResource }};
use {{ rootNamespace }}Http\Request;
use {{ rootNamespace }}Http\Response;

class {{ class }} extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $perPage=($request->filled('perPage'))?$request->get('perPage'):10;
        $page=($request->filled('page'))?$request->get('page'):1;
        return {{ modelResourceCollection }}::collection(
            {{ model }}::offset($page*$perPage)->paginate($perPage, ['*'], 'page', $page)
        );
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        try{
            $data= new {{ modelResource }}(
                {{ model }}::create($request->all())
            );
            if ($data) {
                return response()->json(['success' => true, 'message' => true, 'data' => $data], Response::HTTP_OK);
            }
            return response()->json(['error' => true, 'message' => false, 'data' => []], Response::HTTP_NOT_FOUND);
        } catch (\Exception $e) {
            return response()->json(['error' => true, 'message' => false, 'data' => $e->getMessage()], Response::HTTP_BAD_REQUEST);
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return \Illuminate\Http\Response
     */
    public function show({{ model }} ${{ modelVariable }})
    {
        return new {{ modelResource }}(${{ modelVariable }});
    }

 public function update(Request $request, $id)
    {
        try{
            return response()->json(['success' => true, 'message' => true, 'data' =>  json_encode($request)], Response::HTTP_BAD_REQUEST);
            $data= new {{ modelResource }}(
                {{ model }}::findOrfail($id)->update($request->all())
            );

            if ($data) {
                return response()->json(['success' => true, 'message' => true, 'data' => $data], Response::HTTP_OK);
            }
            return response()->json(['error' => true, 'message' => false, 'data' => []], Response::HTTP_NOT_FOUND);
        } catch (\Exception $e) {
            return response()->json(['error' => true, 'message' => false, 'data' => $e->getMessage()], Response::HTTP_BAD_REQUEST);
        }
    }
    /**
     * Remove the specified resource from storage.
     *
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return \Illuminate\Http\Response
     */
    public function destroy({{ model }} ${{ modelVariable }})
    {
        try{
            ${{ modelVariable }}=${{ modelVariable }}->delete();
            if (${{ modelVariable }}) {
                return response()->json(['success' => true, 'message' => true, 'data' => ${{ modelVariable }}], Response::HTTP_OK);
            }
            return response()->json(['error' => true, 'message' => false, 'data' => []], Response::HTTP_NOT_FOUND);
        } catch (\Exception $e) {
            return response()->json(['error' => true, 'message' => false, 'data' => $e->getMessage()], Response::HTTP_BAD_REQUEST);
        }
    }
}
